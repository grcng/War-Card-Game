| tests results n deck |

"
These test cases assume that the TOP of the deck is the FRONT of the array.
That is, the top card is index 1, 2nd from the top is index 2, etc.
If your deal: logic is opposite, simply reverse the array in your method,
and reverse it back before returning.
"

tests := #(
	"One long war until the end. This is technically a tie. Simply return the tied pile (the warchest)"
	#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9 7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)
	"War at the start, then player 1 wins every draw"
	#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9 8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)
	"Same as above, but players are inverted. Good sanity check."
	#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)
	"Medium length game with 4 wars, finishes on a war"
	#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)
	"Long game with 11 wars, several of which are multiple rounds"
	#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)
	
	#(10 6 3 11 9 13 12 4 7 1 1 13 2 7 6 10 8 2 4 12 11 8 4 9 3 3 2 10 5 8 5 13 6 4 7 1 12 9 3 5 2 13 9 11 12 7 6 5 1 11 10 8)
	#(9 9 8 5 13 8 3 6 10 9 5 9 7 1 6 1 3 11 8 10 2 5 10 4 1 12 7 3 4 13 5 11 2 11 1 7 12 6 8 7 13 13 2 4 2 4 12 11 3 12 6 10)
	#(13 3 11 2 5 1 9 3 12 11 11 8 6 8 9 6 13 6 1 4 5 3 10 11 13 7 7 5 13 4 3 10 10 12 4 10 4 5 8 8 2 1 9 2 7 9 12 1 7 12 2 6)
	#(11 8 3 8 4 5 13 6 10 4 9 13 2 6 12 12 1 3 2 8 4 5 11 5 8 12 6 5 9 4 10 10 6 10 11 2 1 2 3 7 11 13 13 1 12 9 1 7 7 9 7 3)
	#(10 2 3 4 12 7 6 3 5 5 10 6 4 1 3 5 13 5 12 7 3 2 6 11 1 8 13 8 2 11 1 4 11 12 11 1 9 4 7 10 12 13 13 6 8 10 9 2 8 9 7 9)
	#(13 9 11 4 7 6 12 2 10 8 5 9 11 6 10 3 13 8 2 4 10 8 11 1 4 6 12 7 1 5 1 13 2 3 12 1 5 9 2 3 4 3 11 7 5 12 8 13 6 9 7 10)
	#(1 2 1 2 1 2 1 2 3 4 3 4 3 4 3 4 5 6 5 6 5 6 5 6 7 8 7 8 7 8 7 8 9 10 9 10 9 10 9 10 11 12 11 12 11 12 11 12 13 13 13 13)
	#(7 4 1 2 1 8 8 1 2 2 10 10 12 6 9 10 3 13 11 7 12 7 10 3 9 11 5 4 8 13 7 2 9 4 11 6 12 11 8 9 1 12 5 13 3 5 4 6 6 13 3 5)
	#(8 7 3 2 1 6 10 4 12 4 10 2 1 10 1 8 13 8 13 7 12 5 4 3 13 7 13 5 12 11 9 7 9 6 9 4 12 6 5 3 11 3 9 2 1 11 11 10 6 2 8 5)
	#(12 10 11 9 13 9 8 6 12 9 7 5 1 5 7 3 10 3 6 2 10 9 5 3 4 2 1 1 13 12 10 5 6 2 1 8 11 8 4 4 3 2 13 11 12 7 6 4 13 8 11 7)
	#(13 12 11 10 9 8 7 6 5 4 3 2 1 13 12 11 10 9 8 7 6 5 4 3 2 1 13 12 11 10 9 8 7 6 5 4 3 2 1 13 12 11 10 9 8 7 6 5 4 3 2 1)
	#(1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13 13)
	#(13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2 1 1 1 1)
	#(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 13 13 13 13)
	#(13 13 13 13 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12)
).

results := #(
	#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)
	#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)
	#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)
	#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)
	#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)	
	#(8 3 11 11 11 10 8 7 5 5 4 2 4 2 1 9 12 9 7 6 4 2 1 1 1 13 13 10 9 8 6 3 11 9 12 8 10 5 7 5 13 6 13 3 12 6 12 4 10 3 7 2)
	#(5 3 13 7 13 10 12 6 11 6 10 6 8 5 7 2 9 8 6 4 5 4 11 7 13 12 3 3 3 2 11 9 10 5 7 4 1 13 1 12 11 10 9 4 9 2 8 2 1 1 12 8)
	#(6 4 1 2 12 2 1 13 1 7 9 6 1 13 13 12 9 5 5 3 12 11 11 10 9 2 13 3 10 2 11 8 10 8 11 7 10 6 5 4 12 7 4 3 9 7 8 6 8 4 5 3)
	#(7 4 10 9 6 5 10 9 8 3 13 12 10 6 11 8 8 3 12 5 6 4 11 3 4 2 1 12 1 13 1 8 1 2 13 11 12 9 11 9 6 4 7 3 5 2 5 2 13 10 7 7)
	#(7 3 1 13 12 12 11 11 10 5 10 10 9 7 4 3 7 3 6 2 1 1 8 7 2 2 1 8 12 2 11 10 8 6 13 6 9 9 5 5 5 3 13 13 12 11 8 4 9 6 4 4)
	#(3 2 11 6 6 4 12 4 9 7 6 5 2 2 11 9 13 7 9 6 11 4 10 3 1 1 13 13 13 12 1 1 12 10 8 8 12 11 5 4 10 7 9 5 10 8 8 7 5 3 3 2)
	#(9 8 2 2 11 5 4 2 9 4 5 2 1 8 12 7 11 6 1 9 10 3 13 10 5 3 1 10 10 9 12 6 7 4 1 8 6 3 13 8 13 7 13 5 12 6 12 4 11 7 11 3)
	#(8 7 3 2 1 6 10 4 12 4 10 2 1 10 1 8 13 8 13 7 12 5 4 3 13 7 13 5 12 11 9 7 9 6 9 4 12 6 5 3 11 3 9 2 1 11 11 10 6 2 8 5)
	#(8 5 6 2 11 10 1 11 9 2 11 3 5 3 12 6 9 4 9 6 9 7 12 11 13 5 13 7 4 3 12 5 13 7 13 8 1 8 1 10 10 2 12 4 10 4 1 6 3 2 8 7)
	#(11 7 13 8 6 4 12 7 13 11 3 2 1 11 8 8 4 4 6 2 10 5 13 12 1 1 5 4 3 2 10 9 6 2 10 3 7 3 1 5 7 5 12 9 8 6 13 9 11 9 12 10)
	#(1 9 13 7 13 6 12 11 11 8 4 3 11 6 9 2 9 8 8 5 9 5 8 2 1 10 12 7 13 10 7 5 11 6 6 4 1 12 5 3 13 10 4 3 1 10 4 2 12 7 3 2)
	#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)
	#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)
	#(5 2 9 6 1 6 11 4 10 5 9 3 13 5 11 3 1 4 12 2 7 2 3 2 1 13 13 11 10 10 13 12 12 9 7 4 1 7 10 4 11 5 6 3 12 9 8 8 8 8 7 6)
	#(10 9 10 8 1 7 7 6 6 5 8 4 5 3 1 11 4 2 3 2 1 7 12 2 13 5 10 2 13 11 8 4 12 9 7 3 13 9 11 9 13 8 10 6 1 6 12 4 12 5 11 3)
).

deck := #(1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13 13).


Transcript clear.
1 to: (results size) do: [ :i |
	| shuffling should_be you_said |
	shuffling := tests at: i.
	should_be := results at: i.
	you_said := War deal: shuffling.
	
	you_said = should_be 
	ifTrue: [ Transcript show: 'Test '; show: i; show: ': PASS'; cr. ]
	ifFalse: [ Transcript show: 'Test '; show: i; show: ': FAILED'; cr. ]
].


Transcript cr; show: 'Mass stress test - Output is a permutation of input:'; cr.
n := 0.
1 to: 500 do: [ :i | 
	| you_said ex |
	ex := false.
	[ you_said := (War deal: deck shuffled) asSortedCollection asArray ] on: Exception do: [ :e | ex := true ].
	ex ifFalse: [ (deck = you_said)	ifTrue: [ n := n + 1 ] ]. 
].
Transcript show: 'Passed ', n asString, ' of 500     '.	
Transcript show: '('; show: (n / 100.0); show: '/5.0)'; cr.	

